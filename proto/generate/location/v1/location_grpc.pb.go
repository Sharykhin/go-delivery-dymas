// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: location.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CourierLocation_GetCourierLatestPosition_FullMethodName = "/CourierLocation/GetCourierLatestPosition"
)

// CourierLocationClient is the client API for CourierLocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierLocationClient interface {
	GetCourierLatestPosition(ctx context.Context, in *GetCourierLatestPositionRequest, opts ...grpc.CallOption) (*GetCourierLatestPositionResponse, error)
}

type courierLocationClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierLocationClient(cc grpc.ClientConnInterface) CourierLocationClient {
	return &courierLocationClient{cc}
}

func (c *courierLocationClient) GetCourierLatestPosition(ctx context.Context, in *GetCourierLatestPositionRequest, opts ...grpc.CallOption) (*GetCourierLatestPositionResponse, error) {
	out := new(GetCourierLatestPositionResponse)
	err := c.cc.Invoke(ctx, CourierLocation_GetCourierLatestPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierLocationServer is the server API for CourierLocation service.
// All implementations must embed UnimplementedCourierLocationServer
// for forward compatibility
type CourierLocationServer interface {
	GetCourierLatestPosition(context.Context, *GetCourierLatestPositionRequest) (*GetCourierLatestPositionResponse, error)
	mustEmbedUnimplementedCourierLocationServer()
}

// UnimplementedCourierLocationServer must be embedded to have forward compatible implementations.
type UnimplementedCourierLocationServer struct {
}

func (UnimplementedCourierLocationServer) GetCourierLatestPosition(context.Context, *GetCourierLatestPositionRequest) (*GetCourierLatestPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierLatestPosition not implemented")
}
func (UnimplementedCourierLocationServer) mustEmbedUnimplementedCourierLocationServer() {}

// UnsafeCourierLocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierLocationServer will
// result in compilation errors.
type UnsafeCourierLocationServer interface {
	mustEmbedUnimplementedCourierLocationServer()
}

func RegisterCourierLocationServer(s grpc.ServiceRegistrar, srv CourierLocationServer) {
	s.RegisterService(&CourierLocation_ServiceDesc, srv)
}

func _CourierLocation_GetCourierLatestPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierLatestPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServer).GetCourierLatestPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocation_GetCourierLatestPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServer).GetCourierLatestPosition(ctx, req.(*GetCourierLatestPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierLocation_ServiceDesc is the grpc.ServiceDesc for CourierLocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierLocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CourierLocation",
	HandlerType: (*CourierLocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourierLatestPosition",
			Handler:    _CourierLocation_GetCourierLatestPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location.proto",
}
