// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: courier.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssignCourier_GetAssignCourier_FullMethodName = "/AssignCourier/GetAssignCourier"
)

// AssignCourierClient is the client API for AssignCourier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignCourierClient interface {
	GetAssignCourier(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAssignCourierResponse, error)
}

type assignCourierClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignCourierClient(cc grpc.ClientConnInterface) AssignCourierClient {
	return &assignCourierClient{cc}
}

func (c *assignCourierClient) GetAssignCourier(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAssignCourierResponse, error) {
	out := new(GetAssignCourierResponse)
	err := c.cc.Invoke(ctx, AssignCourier_GetAssignCourier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignCourierServer is the server API for AssignCourier service.
// All implementations must embed UnimplementedAssignCourierServer
// for forward compatibility
type AssignCourierServer interface {
	GetAssignCourier(context.Context, *Empty) (*GetAssignCourierResponse, error)
	mustEmbedUnimplementedAssignCourierServer()
}

// UnimplementedAssignCourierServer must be embedded to have forward compatible implementations.
type UnimplementedAssignCourierServer struct {
}

func (UnimplementedAssignCourierServer) GetAssignCourier(context.Context, *Empty) (*GetAssignCourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignCourier not implemented")
}
func (UnimplementedAssignCourierServer) mustEmbedUnimplementedAssignCourierServer() {}

// UnsafeAssignCourierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignCourierServer will
// result in compilation errors.
type UnsafeAssignCourierServer interface {
	mustEmbedUnimplementedAssignCourierServer()
}

func RegisterAssignCourierServer(s grpc.ServiceRegistrar, srv AssignCourierServer) {
	s.RegisterService(&AssignCourier_ServiceDesc, srv)
}

func _AssignCourier_GetAssignCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignCourierServer).GetAssignCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignCourier_GetAssignCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignCourierServer).GetAssignCourier(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignCourier_ServiceDesc is the grpc.ServiceDesc for AssignCourier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignCourier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AssignCourier",
	HandlerType: (*AssignCourierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssignCourier",
			Handler:    _AssignCourier_GetAssignCourier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courier.proto",
}
