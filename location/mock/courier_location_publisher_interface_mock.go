// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/Sharykhin/go-delivery-dymas/location/domain.CourierLocationPublisherInterface -o courier_location_publisher_interface_mock_test.go -n CourierLocationPublisherInterfaceMock -p location_mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_domain "github.com/Sharykhin/go-delivery-dymas/location/domain"
	"github.com/gojuno/minimock/v3"
)

// CourierLocationPublisherInterfaceMock implements domain.CourierLocationPublisherInterface
type CourierLocationPublisherInterfaceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcPublishLatestCourierLocation          func(ctx context.Context, courierLocation *mm_domain.CourierLocation) (err error)
	inspectFuncPublishLatestCourierLocation   func(ctx context.Context, courierLocation *mm_domain.CourierLocation)
	afterPublishLatestCourierLocationCounter  uint64
	beforePublishLatestCourierLocationCounter uint64
	PublishLatestCourierLocationMock          mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation
}

// NewCourierLocationPublisherInterfaceMock returns a mock for domain.CourierLocationPublisherInterface
func NewCourierLocationPublisherInterfaceMock(t minimock.Tester) *CourierLocationPublisherInterfaceMock {
	m := &CourierLocationPublisherInterfaceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PublishLatestCourierLocationMock = mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation{mock: m}
	m.PublishLatestCourierLocationMock.callArgs = []*CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation struct {
	mock               *CourierLocationPublisherInterfaceMock
	defaultExpectation *CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation
	expectations       []*CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation

	callArgs []*CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams
	mutex    sync.RWMutex
}

// CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation specifies expectation struct of the CourierLocationPublisherInterface.PublishLatestCourierLocation
type CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation struct {
	mock    *CourierLocationPublisherInterfaceMock
	params  *CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams
	results *CourierLocationPublisherInterfaceMockPublishLatestCourierLocationResults
	Counter uint64
}

// CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams contains parameters of the CourierLocationPublisherInterface.PublishLatestCourierLocation
type CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams struct {
	ctx             context.Context
	courierLocation *mm_domain.CourierLocation
}

// CourierLocationPublisherInterfaceMockPublishLatestCourierLocationResults contains results of the CourierLocationPublisherInterface.PublishLatestCourierLocation
type CourierLocationPublisherInterfaceMockPublishLatestCourierLocationResults struct {
	err error
}

// Expect sets up expected params for CourierLocationPublisherInterface.PublishLatestCourierLocation
func (mmPublishLatestCourierLocation *mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation) Expect(ctx context.Context, courierLocation *mm_domain.CourierLocation) *mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation {
	if mmPublishLatestCourierLocation.mock.funcPublishLatestCourierLocation != nil {
		mmPublishLatestCourierLocation.mock.t.Fatalf("CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation mock is already set by Set")
	}

	if mmPublishLatestCourierLocation.defaultExpectation == nil {
		mmPublishLatestCourierLocation.defaultExpectation = &CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation{}
	}

	mmPublishLatestCourierLocation.defaultExpectation.params = &CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams{ctx, courierLocation}
	for _, e := range mmPublishLatestCourierLocation.expectations {
		if minimock.Equal(e.params, mmPublishLatestCourierLocation.defaultExpectation.params) {
			mmPublishLatestCourierLocation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPublishLatestCourierLocation.defaultExpectation.params)
		}
	}

	return mmPublishLatestCourierLocation
}

// Inspect accepts an inspector function that has same arguments as the CourierLocationPublisherInterface.PublishLatestCourierLocation
func (mmPublishLatestCourierLocation *mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation) Inspect(f func(ctx context.Context, courierLocation *mm_domain.CourierLocation)) *mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation {
	if mmPublishLatestCourierLocation.mock.inspectFuncPublishLatestCourierLocation != nil {
		mmPublishLatestCourierLocation.mock.t.Fatalf("Inspect function is already set for CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation")
	}

	mmPublishLatestCourierLocation.mock.inspectFuncPublishLatestCourierLocation = f

	return mmPublishLatestCourierLocation
}

// Return sets up results that will be returned by CourierLocationPublisherInterface.PublishLatestCourierLocation
func (mmPublishLatestCourierLocation *mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation) Return(err error) *CourierLocationPublisherInterfaceMock {
	if mmPublishLatestCourierLocation.mock.funcPublishLatestCourierLocation != nil {
		mmPublishLatestCourierLocation.mock.t.Fatalf("CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation mock is already set by Set")
	}

	if mmPublishLatestCourierLocation.defaultExpectation == nil {
		mmPublishLatestCourierLocation.defaultExpectation = &CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation{mock: mmPublishLatestCourierLocation.mock}
	}
	mmPublishLatestCourierLocation.defaultExpectation.results = &CourierLocationPublisherInterfaceMockPublishLatestCourierLocationResults{err}
	return mmPublishLatestCourierLocation.mock
}

// Set uses given function f to mock the CourierLocationPublisherInterface.PublishLatestCourierLocation method
func (mmPublishLatestCourierLocation *mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation) Set(f func(ctx context.Context, courierLocation *mm_domain.CourierLocation) (err error)) *CourierLocationPublisherInterfaceMock {
	if mmPublishLatestCourierLocation.defaultExpectation != nil {
		mmPublishLatestCourierLocation.mock.t.Fatalf("Default expectation is already set for the CourierLocationPublisherInterface.PublishLatestCourierLocation method")
	}

	if len(mmPublishLatestCourierLocation.expectations) > 0 {
		mmPublishLatestCourierLocation.mock.t.Fatalf("Some expectations are already set for the CourierLocationPublisherInterface.PublishLatestCourierLocation method")
	}

	mmPublishLatestCourierLocation.mock.funcPublishLatestCourierLocation = f
	return mmPublishLatestCourierLocation.mock
}

// When sets expectation for the CourierLocationPublisherInterface.PublishLatestCourierLocation which will trigger the result defined by the following
// Then helper
func (mmPublishLatestCourierLocation *mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation) When(ctx context.Context, courierLocation *mm_domain.CourierLocation) *CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation {
	if mmPublishLatestCourierLocation.mock.funcPublishLatestCourierLocation != nil {
		mmPublishLatestCourierLocation.mock.t.Fatalf("CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation mock is already set by Set")
	}

	expectation := &CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation{
		mock:   mmPublishLatestCourierLocation.mock,
		params: &CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams{ctx, courierLocation},
	}
	mmPublishLatestCourierLocation.expectations = append(mmPublishLatestCourierLocation.expectations, expectation)
	return expectation
}

// Then sets up CourierLocationPublisherInterface.PublishLatestCourierLocation return parameters for the expectation previously defined by the When method
func (e *CourierLocationPublisherInterfaceMockPublishLatestCourierLocationExpectation) Then(err error) *CourierLocationPublisherInterfaceMock {
	e.results = &CourierLocationPublisherInterfaceMockPublishLatestCourierLocationResults{err}
	return e.mock
}

// PublishLatestCourierLocation implements domain.CourierLocationPublisherInterface
func (mmPublishLatestCourierLocation *CourierLocationPublisherInterfaceMock) PublishLatestCourierLocation(ctx context.Context, courierLocation *mm_domain.CourierLocation) (err error) {
	mm_atomic.AddUint64(&mmPublishLatestCourierLocation.beforePublishLatestCourierLocationCounter, 1)
	defer mm_atomic.AddUint64(&mmPublishLatestCourierLocation.afterPublishLatestCourierLocationCounter, 1)

	if mmPublishLatestCourierLocation.inspectFuncPublishLatestCourierLocation != nil {
		mmPublishLatestCourierLocation.inspectFuncPublishLatestCourierLocation(ctx, courierLocation)
	}

	mm_params := CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams{ctx, courierLocation}

	// Record call args
	mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.mutex.Lock()
	mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.callArgs = append(mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.callArgs, &mm_params)
	mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.mutex.Unlock()

	for _, e := range mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.defaultExpectation.Counter, 1)
		mm_want := mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.defaultExpectation.params
		mm_got := CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams{ctx, courierLocation}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPublishLatestCourierLocation.t.Errorf("CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPublishLatestCourierLocation.PublishLatestCourierLocationMock.defaultExpectation.results
		if mm_results == nil {
			mmPublishLatestCourierLocation.t.Fatal("No results are set for the CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation")
		}
		return (*mm_results).err
	}
	if mmPublishLatestCourierLocation.funcPublishLatestCourierLocation != nil {
		return mmPublishLatestCourierLocation.funcPublishLatestCourierLocation(ctx, courierLocation)
	}
	mmPublishLatestCourierLocation.t.Fatalf("Unexpected call to CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation. %v %v", ctx, courierLocation)
	return
}

// PublishLatestCourierLocationAfterCounter returns a count of finished CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation invocations
func (mmPublishLatestCourierLocation *CourierLocationPublisherInterfaceMock) PublishLatestCourierLocationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPublishLatestCourierLocation.afterPublishLatestCourierLocationCounter)
}

// PublishLatestCourierLocationBeforeCounter returns a count of CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation invocations
func (mmPublishLatestCourierLocation *CourierLocationPublisherInterfaceMock) PublishLatestCourierLocationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPublishLatestCourierLocation.beforePublishLatestCourierLocationCounter)
}

// Calls returns a list of arguments used in each call to CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPublishLatestCourierLocation *mCourierLocationPublisherInterfaceMockPublishLatestCourierLocation) Calls() []*CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams {
	mmPublishLatestCourierLocation.mutex.RLock()

	argCopy := make([]*CourierLocationPublisherInterfaceMockPublishLatestCourierLocationParams, len(mmPublishLatestCourierLocation.callArgs))
	copy(argCopy, mmPublishLatestCourierLocation.callArgs)

	mmPublishLatestCourierLocation.mutex.RUnlock()

	return argCopy
}

// MinimockPublishLatestCourierLocationDone returns true if the count of the PublishLatestCourierLocation invocations corresponds
// the number of defined expectations
func (m *CourierLocationPublisherInterfaceMock) MinimockPublishLatestCourierLocationDone() bool {
	for _, e := range m.PublishLatestCourierLocationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PublishLatestCourierLocationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPublishLatestCourierLocationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPublishLatestCourierLocation != nil && mm_atomic.LoadUint64(&m.afterPublishLatestCourierLocationCounter) < 1 {
		return false
	}
	return true
}

// MinimockPublishLatestCourierLocationInspect logs each unmet expectation
func (m *CourierLocationPublisherInterfaceMock) MinimockPublishLatestCourierLocationInspect() {
	for _, e := range m.PublishLatestCourierLocationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PublishLatestCourierLocationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPublishLatestCourierLocationCounter) < 1 {
		if m.PublishLatestCourierLocationMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation")
		} else {
			m.t.Errorf("Expected call to CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation with params: %#v", *m.PublishLatestCourierLocationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPublishLatestCourierLocation != nil && mm_atomic.LoadUint64(&m.afterPublishLatestCourierLocationCounter) < 1 {
		m.t.Error("Expected call to CourierLocationPublisherInterfaceMock.PublishLatestCourierLocation")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CourierLocationPublisherInterfaceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockPublishLatestCourierLocationInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CourierLocationPublisherInterfaceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CourierLocationPublisherInterfaceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPublishLatestCourierLocationDone()
}
