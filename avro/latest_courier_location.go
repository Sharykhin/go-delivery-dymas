// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     location_schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LatestCourierLocation struct {
	Courier_id string `json:"courier_id"`

	Latitude float64 `json:"latitude"`

	Longitude float64 `json:"longitude"`

	Created_at int32 `json:"created_at"`
}

const LatestCourierLocationAvroCRC64Fingerprint = "\x05\xe0Vk(\xff\xe0o"

func NewLatestCourierLocation() LatestCourierLocation {
	r := LatestCourierLocation{}
	return r
}

func DeserializeLatestCourierLocation(r io.Reader) (LatestCourierLocation, error) {
	t := NewLatestCourierLocation()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLatestCourierLocationFromSchema(r io.Reader, schema string) (LatestCourierLocation, error) {
	t := NewLatestCourierLocation()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLatestCourierLocation(r LatestCourierLocation, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Courier_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Latitude, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Longitude, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Created_at, w)
	if err != nil {
		return err
	}
	return err
}

func (r LatestCourierLocation) Serialize(w io.Writer) error {
	return writeLatestCourierLocation(r, w)
}

func (r LatestCourierLocation) Schema() string {
	return "{\"fields\":[{\"name\":\"courier_id\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"created_at\",\"type\":{\"logicalType\":\"date\",\"type\":\"int\"}}],\"name\":\"LatestCourierLocation\",\"type\":\"record\"}"
}

func (r LatestCourierLocation) SchemaName() string {
	return "LatestCourierLocation"
}

func (_ LatestCourierLocation) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LatestCourierLocation) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LatestCourierLocation) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LatestCourierLocation) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LatestCourierLocation) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LatestCourierLocation) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LatestCourierLocation) SetString(v string)   { panic("Unsupported operation") }
func (_ LatestCourierLocation) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LatestCourierLocation) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Courier_id}

		return w

	case 1:
		w := types.Double{Target: &r.Latitude}

		return w

	case 2:
		w := types.Double{Target: &r.Longitude}

		return w

	case 3:
		w := types.Int{Target: &r.Created_at}

		return w

	}
	panic("Unknown field index")
}

func (r *LatestCourierLocation) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *LatestCourierLocation) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ LatestCourierLocation) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LatestCourierLocation) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LatestCourierLocation) HintSize(int)                     { panic("Unsupported operation") }
func (_ LatestCourierLocation) Finalize()                        {}

func (_ LatestCourierLocation) AvroCRC64Fingerprint() []byte {
	return []byte(LatestCourierLocationAvroCRC64Fingerprint)
}

func (r LatestCourierLocation) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["courier_id"], err = json.Marshal(r.Courier_id)
	if err != nil {
		return nil, err
	}
	output["latitude"], err = json.Marshal(r.Latitude)
	if err != nil {
		return nil, err
	}
	output["longitude"], err = json.Marshal(r.Longitude)
	if err != nil {
		return nil, err
	}
	output["created_at"], err = json.Marshal(r.Created_at)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LatestCourierLocation) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["courier_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Courier_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for courier_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["latitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitude); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for latitude")
	}
	val = func() json.RawMessage {
		if v, ok := fields["longitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitude); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for longitude")
	}
	val = func() json.RawMessage {
		if v, ok := fields["created_at"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created_at); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for created_at")
	}
	return nil
}
