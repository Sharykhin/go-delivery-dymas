// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package order_mocks

//go:generate minimock -i github.com/Sharykhin/go-delivery-dymas/order/domain.OrderPublisher -o order_publisher_mock_test.go -n OrderPublisherMock -p order_mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_domain "github.com/Sharykhin/go-delivery-dymas/order/domain"
	"github.com/gojuno/minimock/v3"
)

// OrderPublisherMock implements domain.OrderPublisher
type OrderPublisherMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcPublishOrder          func(ctx context.Context, order *mm_domain.Order, event string) (err error)
	inspectFuncPublishOrder   func(ctx context.Context, order *mm_domain.Order, event string)
	afterPublishOrderCounter  uint64
	beforePublishOrderCounter uint64
	PublishOrderMock          mOrderPublisherMockPublishOrder
}

// NewOrderPublisherMock returns a mock for domain.OrderPublisher
func NewOrderPublisherMock(t minimock.Tester) *OrderPublisherMock {
	m := &OrderPublisherMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PublishOrderMock = mOrderPublisherMockPublishOrder{mock: m}
	m.PublishOrderMock.callArgs = []*OrderPublisherMockPublishOrderParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderPublisherMockPublishOrder struct {
	mock               *OrderPublisherMock
	defaultExpectation *OrderPublisherMockPublishOrderExpectation
	expectations       []*OrderPublisherMockPublishOrderExpectation

	callArgs []*OrderPublisherMockPublishOrderParams
	mutex    sync.RWMutex
}

// OrderPublisherMockPublishOrderExpectation specifies expectation struct of the OrderPublisher.PublishOrder
type OrderPublisherMockPublishOrderExpectation struct {
	mock      *OrderPublisherMock
	params    *OrderPublisherMockPublishOrderParams
	paramPtrs *OrderPublisherMockPublishOrderParamPtrs
	results   *OrderPublisherMockPublishOrderResults
	Counter   uint64
}

// OrderPublisherMockPublishOrderParams contains parameters of the OrderPublisher.PublishOrder
type OrderPublisherMockPublishOrderParams struct {
	ctx   context.Context
	order *mm_domain.Order
	event string
}

// OrderPublisherMockPublishOrderParamPtrs contains pointers to parameters of the OrderPublisher.PublishOrder
type OrderPublisherMockPublishOrderParamPtrs struct {
	ctx   *context.Context
	order **mm_domain.Order
	event *string
}

// OrderPublisherMockPublishOrderResults contains results of the OrderPublisher.PublishOrder
type OrderPublisherMockPublishOrderResults struct {
	err error
}

// Expect sets up expected params for OrderPublisher.PublishOrder
func (mmPublishOrder *mOrderPublisherMockPublishOrder) Expect(ctx context.Context, order *mm_domain.Order, event string) *mOrderPublisherMockPublishOrder {
	if mmPublishOrder.mock.funcPublishOrder != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Set")
	}

	if mmPublishOrder.defaultExpectation == nil {
		mmPublishOrder.defaultExpectation = &OrderPublisherMockPublishOrderExpectation{}
	}

	if mmPublishOrder.defaultExpectation.paramPtrs != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by ExpectParams functions")
	}

	mmPublishOrder.defaultExpectation.params = &OrderPublisherMockPublishOrderParams{ctx, order, event}
	for _, e := range mmPublishOrder.expectations {
		if minimock.Equal(e.params, mmPublishOrder.defaultExpectation.params) {
			mmPublishOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPublishOrder.defaultExpectation.params)
		}
	}

	return mmPublishOrder
}

// ExpectCtxParam1 sets up expected param ctx for OrderPublisher.PublishOrder
func (mmPublishOrder *mOrderPublisherMockPublishOrder) ExpectCtxParam1(ctx context.Context) *mOrderPublisherMockPublishOrder {
	if mmPublishOrder.mock.funcPublishOrder != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Set")
	}

	if mmPublishOrder.defaultExpectation == nil {
		mmPublishOrder.defaultExpectation = &OrderPublisherMockPublishOrderExpectation{}
	}

	if mmPublishOrder.defaultExpectation.params != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Expect")
	}

	if mmPublishOrder.defaultExpectation.paramPtrs == nil {
		mmPublishOrder.defaultExpectation.paramPtrs = &OrderPublisherMockPublishOrderParamPtrs{}
	}
	mmPublishOrder.defaultExpectation.paramPtrs.ctx = &ctx

	return mmPublishOrder
}

// ExpectOrderParam2 sets up expected param order for OrderPublisher.PublishOrder
func (mmPublishOrder *mOrderPublisherMockPublishOrder) ExpectOrderParam2(order *mm_domain.Order) *mOrderPublisherMockPublishOrder {
	if mmPublishOrder.mock.funcPublishOrder != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Set")
	}

	if mmPublishOrder.defaultExpectation == nil {
		mmPublishOrder.defaultExpectation = &OrderPublisherMockPublishOrderExpectation{}
	}

	if mmPublishOrder.defaultExpectation.params != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Expect")
	}

	if mmPublishOrder.defaultExpectation.paramPtrs == nil {
		mmPublishOrder.defaultExpectation.paramPtrs = &OrderPublisherMockPublishOrderParamPtrs{}
	}
	mmPublishOrder.defaultExpectation.paramPtrs.order = &order

	return mmPublishOrder
}

// ExpectEventParam3 sets up expected param event for OrderPublisher.PublishOrder
func (mmPublishOrder *mOrderPublisherMockPublishOrder) ExpectEventParam3(event string) *mOrderPublisherMockPublishOrder {
	if mmPublishOrder.mock.funcPublishOrder != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Set")
	}

	if mmPublishOrder.defaultExpectation == nil {
		mmPublishOrder.defaultExpectation = &OrderPublisherMockPublishOrderExpectation{}
	}

	if mmPublishOrder.defaultExpectation.params != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Expect")
	}

	if mmPublishOrder.defaultExpectation.paramPtrs == nil {
		mmPublishOrder.defaultExpectation.paramPtrs = &OrderPublisherMockPublishOrderParamPtrs{}
	}
	mmPublishOrder.defaultExpectation.paramPtrs.event = &event

	return mmPublishOrder
}

// Inspect accepts an inspector function that has same arguments as the OrderPublisher.PublishOrder
func (mmPublishOrder *mOrderPublisherMockPublishOrder) Inspect(f func(ctx context.Context, order *mm_domain.Order, event string)) *mOrderPublisherMockPublishOrder {
	if mmPublishOrder.mock.inspectFuncPublishOrder != nil {
		mmPublishOrder.mock.t.Fatalf("Inspect function is already set for OrderPublisherMock.PublishOrder")
	}

	mmPublishOrder.mock.inspectFuncPublishOrder = f

	return mmPublishOrder
}

// Return sets up results that will be returned by OrderPublisher.PublishOrder
func (mmPublishOrder *mOrderPublisherMockPublishOrder) Return(err error) *OrderPublisherMock {
	if mmPublishOrder.mock.funcPublishOrder != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Set")
	}

	if mmPublishOrder.defaultExpectation == nil {
		mmPublishOrder.defaultExpectation = &OrderPublisherMockPublishOrderExpectation{mock: mmPublishOrder.mock}
	}
	mmPublishOrder.defaultExpectation.results = &OrderPublisherMockPublishOrderResults{err}
	return mmPublishOrder.mock
}

// Set uses given function f to mock the OrderPublisher.PublishOrder method
func (mmPublishOrder *mOrderPublisherMockPublishOrder) Set(f func(ctx context.Context, order *mm_domain.Order, event string) (err error)) *OrderPublisherMock {
	if mmPublishOrder.defaultExpectation != nil {
		mmPublishOrder.mock.t.Fatalf("Default expectation is already set for the OrderPublisher.PublishOrder method")
	}

	if len(mmPublishOrder.expectations) > 0 {
		mmPublishOrder.mock.t.Fatalf("Some expectations are already set for the OrderPublisher.PublishOrder method")
	}

	mmPublishOrder.mock.funcPublishOrder = f
	return mmPublishOrder.mock
}

// When sets expectation for the OrderPublisher.PublishOrder which will trigger the result defined by the following
// Then helper
func (mmPublishOrder *mOrderPublisherMockPublishOrder) When(ctx context.Context, order *mm_domain.Order, event string) *OrderPublisherMockPublishOrderExpectation {
	if mmPublishOrder.mock.funcPublishOrder != nil {
		mmPublishOrder.mock.t.Fatalf("OrderPublisherMock.PublishOrder mock is already set by Set")
	}

	expectation := &OrderPublisherMockPublishOrderExpectation{
		mock:   mmPublishOrder.mock,
		params: &OrderPublisherMockPublishOrderParams{ctx, order, event},
	}
	mmPublishOrder.expectations = append(mmPublishOrder.expectations, expectation)
	return expectation
}

// Then sets up OrderPublisher.PublishOrder return parameters for the expectation previously defined by the When method
func (e *OrderPublisherMockPublishOrderExpectation) Then(err error) *OrderPublisherMock {
	e.results = &OrderPublisherMockPublishOrderResults{err}
	return e.mock
}

// PublishOrder implements domain.OrderPublisher
func (mmPublishOrder *OrderPublisherMock) PublishOrder(ctx context.Context, order *mm_domain.Order, event string) (err error) {
	mm_atomic.AddUint64(&mmPublishOrder.beforePublishOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmPublishOrder.afterPublishOrderCounter, 1)

	if mmPublishOrder.inspectFuncPublishOrder != nil {
		mmPublishOrder.inspectFuncPublishOrder(ctx, order, event)
	}

	mm_params := OrderPublisherMockPublishOrderParams{ctx, order, event}

	// Record call args
	mmPublishOrder.PublishOrderMock.mutex.Lock()
	mmPublishOrder.PublishOrderMock.callArgs = append(mmPublishOrder.PublishOrderMock.callArgs, &mm_params)
	mmPublishOrder.PublishOrderMock.mutex.Unlock()

	for _, e := range mmPublishOrder.PublishOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPublishOrder.PublishOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPublishOrder.PublishOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmPublishOrder.PublishOrderMock.defaultExpectation.params
		mm_want_ptrs := mmPublishOrder.PublishOrderMock.defaultExpectation.paramPtrs

		mm_got := OrderPublisherMockPublishOrderParams{ctx, order, event}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmPublishOrder.t.Errorf("OrderPublisherMock.PublishOrder got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmPublishOrder.t.Errorf("OrderPublisherMock.PublishOrder got unexpected parameter order, want: %#v, got: %#v%s\n", *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

			if mm_want_ptrs.event != nil && !minimock.Equal(*mm_want_ptrs.event, mm_got.event) {
				mmPublishOrder.t.Errorf("OrderPublisherMock.PublishOrder got unexpected parameter event, want: %#v, got: %#v%s\n", *mm_want_ptrs.event, mm_got.event, minimock.Diff(*mm_want_ptrs.event, mm_got.event))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPublishOrder.t.Errorf("OrderPublisherMock.PublishOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPublishOrder.PublishOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmPublishOrder.t.Fatal("No results are set for the OrderPublisherMock.PublishOrder")
		}
		return (*mm_results).err
	}
	if mmPublishOrder.funcPublishOrder != nil {
		return mmPublishOrder.funcPublishOrder(ctx, order, event)
	}
	mmPublishOrder.t.Fatalf("Unexpected call to OrderPublisherMock.PublishOrder. %v %v %v", ctx, order, event)
	return
}

// PublishOrderAfterCounter returns a count of finished OrderPublisherMock.PublishOrder invocations
func (mmPublishOrder *OrderPublisherMock) PublishOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPublishOrder.afterPublishOrderCounter)
}

// PublishOrderBeforeCounter returns a count of OrderPublisherMock.PublishOrder invocations
func (mmPublishOrder *OrderPublisherMock) PublishOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPublishOrder.beforePublishOrderCounter)
}

// Calls returns a list of arguments used in each call to OrderPublisherMock.PublishOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPublishOrder *mOrderPublisherMockPublishOrder) Calls() []*OrderPublisherMockPublishOrderParams {
	mmPublishOrder.mutex.RLock()

	argCopy := make([]*OrderPublisherMockPublishOrderParams, len(mmPublishOrder.callArgs))
	copy(argCopy, mmPublishOrder.callArgs)

	mmPublishOrder.mutex.RUnlock()

	return argCopy
}

// MinimockPublishOrderDone returns true if the count of the PublishOrder invocations corresponds
// the number of defined expectations
func (m *OrderPublisherMock) MinimockPublishOrderDone() bool {
	for _, e := range m.PublishOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PublishOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPublishOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPublishOrder != nil && mm_atomic.LoadUint64(&m.afterPublishOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockPublishOrderInspect logs each unmet expectation
func (m *OrderPublisherMock) MinimockPublishOrderInspect() {
	for _, e := range m.PublishOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderPublisherMock.PublishOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PublishOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPublishOrderCounter) < 1 {
		if m.PublishOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderPublisherMock.PublishOrder")
		} else {
			m.t.Errorf("Expected call to OrderPublisherMock.PublishOrder with params: %#v", *m.PublishOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPublishOrder != nil && mm_atomic.LoadUint64(&m.afterPublishOrderCounter) < 1 {
		m.t.Error("Expected call to OrderPublisherMock.PublishOrder")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderPublisherMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockPublishOrderInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderPublisherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderPublisherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPublishOrderDone()
}
